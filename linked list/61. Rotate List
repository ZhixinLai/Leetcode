# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        # method one: o(n) = k
        if not head:
            return
        cur = head
        num = 0
        while head:
            num += 1
            head = head.next
        k %= num
        if k == 0:  # pay attention to this one
            return cur
        head = cur
        i = 0
        while i < num-k-1:
            cur = cur.next
            i += 1
        temp = cur.next
        cur.next = None
        cur = temp
        while cur and cur.next:
            cur = cur.next
        cur.next = head
        return temp
        """
        # method two: o(n) = n
        if not head:
            return
        temp = []
        while head:
            temp += [head.val]
            head = head.next
        k %= len(temp)
        res =  temp[-1-k+1:] + temp[:-1-k+1]
        pre = cur = ListNode(0)
        for i in res:
            cur.next = ListNode(i)
            cur = cur.next
        return pre.next
        """
