# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        """
        # method one
        temp2 = head
        while head and head.next:
            temp = head.val
            head.val = head.next.val
            head.next.val = temp
            head = head.next.next
        return temp2
        """

        """
        # method two
        pre = dummpy = ListNode(0)
        cur = dummpy.next = head
        while cur and cur.next:
            nex = cur.next
            pre.next = nex
            cur.next = nex.next
            nex.next = cur
            pre = cur
            cur = cur.next
            
        return dummpy.next
        
        """
        # conciser edition of method two
        pre = dummpy = ListNode(0)
        cur = dummpy.next = head
        while cur and cur.next:
            nex = cur.next
            pre.next, cur.next, nex.next, pre, cur = nex, nex.next, cur, cur, nex.next
        return dummpy.next
        """
 
 //=================== 
 //Java
//====================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode res = new ListNode(0);
        ListNode pre = res;
        ListNode cur = head;
        res.next = head;
        while (cur!=null && cur.next!=null){
            ListNode next = cur.next;
            pre.next = next;
            cur.next = next.next;
            next.next = cur;
            pre = cur;
            cur = cur.next;
        }
        return res.next;
        
    }
}
