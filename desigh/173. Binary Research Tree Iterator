# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):

    """
    # method one : backstracking
    def __init__(self, root):
        
        #:type root: TreeNode
        
        self.node = root
        res = []
        self.dfs(root, res)
        self.res = res
        
    def dfs(self, root, res):
    
        if not root:
            return
        if root.left:
            self.dfs(root.left, res)
        res.append(root.val)
        if root.right:
            self.dfs(root.right, res)
        

    def next(self):
        
        #@return the next smallest number
        #:rtype: int
        
        return self.res.pop(0)

    def hasNext(self):
        
        #@return whether we have a next smallest number
        #:rtype: bool
        
        if self.res:
            return True
        return False
    """
    
    # method two: loop for inorder traversal

    def __init__(self, root):
        #:type root: TreeNode
        self.stack = []
        self.left(root)
        
        
    def next(self):
        temp = self.stack.pop(-1)
        self.left(temp.right)
        return temp.val
        
        #@return the next smallest number
        #:rtype: int
        


    def hasNext(self):
        if self.stack:
            return True
        return False
        #@return whether we have a next smallest number
        #:rtype: bool
        
    def left(self, root):
        while root:
            self.stack.append(root)
            root = root.left
        return
        
    

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
