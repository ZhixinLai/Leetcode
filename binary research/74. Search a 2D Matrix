class Solution:
    # method one: time limited
    # O(n) = nlog(m)
    def searchMatrix1(self, matrix, target):
        for i in matrix:
            l, r = 0, len(i)-1
            while l <= r:
                mid = (l+r)//2
                if i[mid] == target:
                    return True
                elif i[mid] > target:
                    right = mid - 1
                else:
                    left = mid + 1
        return False
        
    # method two: research from the top right one; if the number is bigger than target and then go left else go down
    # O(n) = n+m
    def searchMatrix2(self, matrix, target):
        if not matrix:
            return False
        l, c = 0, len(matrix[0])-1
        while l <= len(matrix)-1 and c >= 0:
            if matrix[l][c] == target:
                return True
            elif matrix[l][c] > target:
                c -= 1
            else:
                l += 1
        return False
    # method three: trensfer the 2D matrix into array first and then applied binary research method to solve the problem
    # O(n) = log(n*m) = logn + logm
    def searchMatrix1(self, matrix, target):
        if not matrix:
            return False
        mat = []
        for i in matrix:
            mat.extend(i)
        l, r = 0, len(mat)-1
        while l <= r:
            mid = (l+r)//2
            if mat[mid] == target:
                return True
            elif mat[mid] > target:
                r = mid -1
            else:
                l = mid + 1
        return False

