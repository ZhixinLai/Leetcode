class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res= new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        Arrays.sort(nums);
        recur(temp, res, nums , new boolean[nums.length]);
        return res;
    }

    private void recur(List<Integer> temp, List<List<Integer>> res, int[] nums, boolean[] used){
        if (nums.length == temp.size()){
            res.add(new ArrayList<>(temp));
        }
        else{
            for(int i = 0; i<nums.length ; i++){
                if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue;
                else{
                    used[i] = true;
                    temp.add(nums[i]);
                    recur(temp, res, nums, used);
                    temp.remove(temp.size()-1);
                    used[i] = false;
                }
            }
        }
    }
}
