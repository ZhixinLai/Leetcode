class TrieNode:
    def __init__(self):
        self.children = {}
        self.isword = False

class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        cur = self.root
        for i in word:
            if i in cur.children:
                cur = cur.children[i]
            else:
                cur.children[i] = TrieNode()
                cur = cur.children[i]
        cur.isword = True

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        cur = self.root
        return self.dfs(word, cur)
    
    def dfs(self, word, cur):
        if not word:
            return cur.isword
        if word[0] != '.':
            if word[0] in cur.children:
                return self.dfs(word[1:], cur.children[word[0]])
            else:
                return False
        else:
            for i in cur.children:
                if self.dfs(word[1:], cur.children[i]):
                    return True
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
