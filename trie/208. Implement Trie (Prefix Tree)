class TrieNode:
    def __init__(self):
        # self.children = collections.defaultdict(TrieNode)  # method one to do define
        self.children = collections.defaultdict() # method two to do define
        self.isword = False
        
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        # method one: 
        """
        cur = self.root
        for i in word:
            cur = cur.children[i]
        cur.isword = True
        """
        
        # method two
        cur = self.root
        for i in word:
            if i in cur.children:
                cur = cur.children[i]
            else:
                cur.children[i] = TrieNode()
                cur = cur.children[i]
        cur.isword = True
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        cur = self.root
        for i in word:
            if i in cur.children:
                cur = cur.children[i]
            else:
                return False
        return cur.isword

        
        
    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        cur = self.root
        for i in prefix:
            if i in cur.children:
                cur = cur.children[i]
            else:
                return False
        return True        
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
