//Python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:

        dic = {}
        l, r = 0, 0
        res = 0
        while r < len(s):
            if s[r] in dic:
                res = max(res, r-l)
                l = max(dic[s[r]]+1,l)
            dic[s[r]] = r
            r += 1
        res = max(res, r-l)
        return res

//Java
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left=0, right=0, res=0;
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        while (right<s.length())
        {
            if (map.containsKey(s.charAt(right)))
            {
                left = Math.max(left, map.get(s.charAt(right))+1);
            }
            res = Math.max(res, right-left+1);
            map.put(s.charAt(right), right);
            right += 1;
        }
        return res;
    }
}
