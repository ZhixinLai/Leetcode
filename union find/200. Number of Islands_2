// iterative method

class Solution {
    public int numIslands(char[][] grid) {
        if ( grid.length == 0 ) return 0;
        int res = 0;
        int row = grid.length, col = grid[0].length;
        for( int i = 0; i < grid.length; i++ ) {
            for ( int j = 0; j < grid[0].length; j++ ) {
                Queue<int[]> queue = new LinkedList<>();
                if ( grid[i][j] == '1' ) {
                    int[]  tmp = new int[]{i,j};
                    queue.offer(tmp);
                    res += 1;
                    while ( queue.size() != 0 ) {
                        int[] q = queue.poll();
                        if ( q[0] >= 0 && q[0] < row && q[1] >= 0 && q[1] < col && grid[q[0]][q[1]] == '1' ) {
                            grid[q[0]][q[1]] = '2';
                            tmp = new int[]{q[0]-1,q[1]};
                            queue.offer( int[]{q[0]-1,q[1]} );
                            tmp = new int[]{q[0]+1,q[1]};
                            queue.offer( tmp );
                            tmp = new int[]{q[0],q[1]-1};
                            queue.offer( tmp );
                            tmp = new int[]{q[0],q[1]+1};
                            queue.offer( tmp );
                        }
                    }
                }
            }
        }
        return res;
    }
}


// recursive method
public class Solution {
    private int n;
    private int m;

    public int numIslands(char[][] grid) {
        int count = 0;
        n = grid.length;
        if (n == 0) return 0;
        m = grid[0].length;
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++)
                if (grid[i][j] == '1') {
                    DFSMarking(grid, i, j);
                    ++count;
                }
        }    
        return count;
    }

    private void DFSMarking(char[][] grid, int i, int j) {
        if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != '1') return;
        grid[i][j] = '0';
        DFSMarking(grid, i + 1, j);
        DFSMarking(grid, i - 1, j);
        DFSMarking(grid, i, j + 1);
        DFSMarking(grid, i, j - 1);
    }
}
